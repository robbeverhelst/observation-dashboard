name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: arc-runner-set-observation-explorer
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run format check
        run: bun run format:check

      - name: Run lint
        run: bun run lint

      - name: Run build test
        run: bun run build

      - name: Run all tests
        run: bun run test:all

  release:
    name: Release
    runs-on: arc-runner-set-observation-explorer
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install semantic-release dependencies
        run: |
          npm install -g semantic-release@23
          npm install -g @semantic-release/changelog@6
          npm install -g @semantic-release/git@10
          npm install -g @semantic-release/github@10

      - name: Run semantic release
        id: semantic
        run: |
          echo "Running semantic-release..."
          npx semantic-release 2>&1 | tee semantic-release-output.log

          # Extract version from the output
          if grep -q "Published release" semantic-release-output.log; then
            VERSION=$(grep -E "Published release [0-9]+\.[0-9]+\.[0-9]+" semantic-release-output.log | grep -oE "[0-9]+\.[0-9]+\.[0-9]+" | head -1)
            echo "new-release-published=true" >> $GITHUB_OUTPUT
            echo "new-release-version=$VERSION" >> $GITHUB_OUTPUT
            echo "✅ Published version: $VERSION"
          else
            echo "new-release-published=false" >> $GITHUB_OUTPUT
            echo "❌ No new release published"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, release]
    if: needs.release.outputs.new-release-published == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}},value=v${{ needs.release.outputs.new-release-version }}
            type=semver,pattern={{major}}.{{minor}},value=v${{ needs.release.outputs.new-release-version }}
            type=semver,pattern={{major}},value=v${{ needs.release.outputs.new-release-version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Update deployment status
        if: success()
        run: |
          echo "✅ Docker image pushed successfully!"
          echo "📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.release.outputs.new-release-version }}"
          echo "🏷️  Tags: ${{ steps.meta.outputs.tags }}"

  deploy:
    name: Deploy Infrastructure
    needs: [build-and-push, release]
    runs-on: arc-runner-set-observation-explorer
    # Only run on main branch pushes, not PRs
    if: github.event_name != 'pull_request' && needs.release.outputs.new-release-published == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main # Ensure we're using the latest main branch with the version update
          fetch-depth: 1

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: ./infra
        run: bun install

      - name: Build infrastructure
        working-directory: ./infra
        run: bun run build

      - name: Use version from release job
        run: |
          echo "VERSION=${{ needs.release.outputs.new-release-version }}" >> $GITHUB_ENV
          echo "Using version: ${{ needs.release.outputs.new-release-version }}"
          REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "WEB_IMAGE=ghcr.io/${REPO_OWNER_LOWER}/observation-explorer:${{ needs.release.outputs.new-release-version }}" >> $GITHUB_ENV

      - name: Pulumi Refresh
        uses: pulumi/actions@v6
        timeout-minutes: 5
        with:
          command: refresh
          stack-name: prod
          work-dir: ./infra
          upsert: true
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}

      - name: Pulumi Update
        uses: pulumi/actions@v6
        timeout-minutes: 5
        with:
          command: up
          stack-name: prod
          work-dir: ./infra
          upsert: true
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
          APP_VERSION: ${{ needs.release.outputs.new-release-version }}
          WEB_IMAGE: ${{ env.WEB_IMAGE }}
          GHCR_USERNAME: ${{ github.actor }}
          GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Observation API OAuth credentials
          OAUTH_GRANT_TYPE: ${{ secrets.OAUTH_GRANT_TYPE }}
          OAUTH_CLIENT_ID: ${{ secrets.OAUTH_CLIENT_ID }}
          OAUTH_CLIENT_SECRET: ${{ secrets.OAUTH_CLIENT_SECRET }}
          OAUTH_USERNAME: ${{ secrets.OAUTH_USERNAME }}
          OAUTH_PASSWORD: ${{ secrets.OAUTH_PASSWORD }}
          # Redis password - set in GitHub secrets
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          # Optional environment variables - uncomment and set in GitHub secrets if needed
          # MAPBOX_ACCESS_TOKEN: ${{ secrets.MAPBOX_ACCESS_TOKEN }}
          # GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}

      - name: Clean up old resources (if any)
        run: |
          echo "Deployment completed successfully. Old resources will be garbage collected by Pulumi."
